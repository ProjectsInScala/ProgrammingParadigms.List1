1.1. let rec flatten (aList) = 
		if aList =[] then []
		else (List.hd aList) @ flatten(List.tl aList)

1.2. let rec count (aObject,aList) = 
		if aList=[] then 0
		else if List.hd aList = aObject then 1+count(aObject,List.tl aList)
		else count(aObject,List.tl aList)

1.3. let rec duplicate (aToReply,aCounter) = 
		if aCounter=0 then []
		else aToReply::duplicate(aToReply,aCounter-1)
		
1.4. let rec sqrList aList = 
		if aList=[] then []
		else ( List.hd aList * List.hd aList )::sqrList(List.tl aList)
		
1.5. let palindrome aLista = aLista=List.rev aLista
		
1.6. let rec listLength aList =
		if aList=[] then 0
		else 1+listLength(List.tl aList)
		
1.7. let rec listAppend (lista1, lista2) =  
		if lista1=[] then lista2  
		else List.hd lista1 :: listAppend(List.tl lista1, lista2)
